<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: InvFunctionExport.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "InvFunctionExport/FB_InverseKinematics/Inverse kinematics function"
 *
 * Model name                      : InvFunctionExport
 * Model version                   : 1.1
 * Model creator                   : krgar
 * Model last modified by          : krgar
 * Model last modified on          : Thu Mar 30 10:57:26 2023
 * Model sample time               : 0.001s
 * Subsystem name                  : InvFunctionExport/FB_InverseKinematics/Inverse kinematics function
 * Subsystem sample time           : 0.001s
 * Simulink PLC Coder version      : 3.7 (R2022b) 13-May-2022
 * ST code generated on            : Thu Mar 30 13:16:54 2023
 *
 * Target IDE selection            : PLCopen XML
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2023-03-30T13:16:54" productName="Simulink PLC Coder" productRelease="(R2022b)" productVersion="3.7"/>
  <contentHeader name="InvFunctionExport">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="Inverse" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="fTooltipXCoordGlobal">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fTooltipYCoordGlobal">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fTooltipZCoordGlobal">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="fAngleMainArm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fAngleKnuckleArm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fStrokeActuatorMain">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fStrokeActuatorKnuckle">
              <type>
                <LREAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="fLengthArmCombined">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fHypotenusArm">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="fAngleMainArm_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="i0_cosd">
              <type>
                <derived name="cosd"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
(* MATLAB Function: '<Root>/Inverse kinematics function' *)
(* Crane constant parameters *)
(* MATLAB Function 'Inverse kinematics function': '<S1>:1' *)
(* '<S1>:1:5' fLengthP2PMainArm			= 1.499; *)
(* '<S1>:1:6' fLengthP2PKnuckleArm		= 1.155; *)
(* '<S1>:1:8' fLengthAMain				= 0.614; *)
(* '<S1>:1:9' fLengthBMain				= 0.571; *)
(* '<S1>:1:10' fMinLengthActuatorMain		= 0.692; *)
(* '<S1>:1:11' fMaxStrokeActuatorMain		= 0.320; *)
(* fOffsetAngleDegMain			= 4.6; *)
(* '<S1>:1:13' fOffsetAngleDegMain			= 7.58; *)
(* '<S1>:1:14' fOffsetAngleRadMain         = deg2rad(fOffsetAngleDegMain); *)
(* '<S1>:1:15' fOffsetAngleDegMainAct		= 69.7; *)
(* '<S1>:1:17' fLengthAKnuckle				= 0.767; *)
(* '<S1>:1:18' fLengthBKnuckle				= 0.1855; *)
(* '<S1>:1:19' fMinLengthActuatorKnuckle	= 0.627; *)
(* '<S1>:1:20' fMaxStrokeActuatorKnuckle	= 0.260; *)
(* fOffsetAngleDegKnuckle		= -12.5; *)
(* '<S1>:1:22' fOffsetAngleDegKnuckle		= 86.74; *)
(* '<S1>:1:23' fOffsetAngleRadKnuckle      = deg2rad(fOffsetAngleDegKnuckle); *)
(* '<S1>:1:24' fOffsetAngleDegKnuckleAct	= 82.85; *)
(* '<S1>:1:26' fSlewGearRatio				= 3.68; *)
(* '<S1>:1:28' fWinchGearRatio				= 32; *)
(* '<S1>:1:31' fTooltipXCoord = (fTooltipXCoordGlobal - 0.75); *)
(* '<S1>:1:32' fTooltipYCoord = (fTooltipYCoordGlobal - 0.0); *)
(* fTooltipZCoord = (fTooltipZCoordGlobal - 1.334); *)
(* '<S1>:1:34' fTooltipZCoord = (fTooltipZCoordGlobal - 1.065  - 1.334); *)
(* fTooltipXCoord = 1.571; *)
(* fTooltipYCoord = 0; *)
(* % %fTooltipZCoord = (fTooltipZCoordGlobal - 1.334); *)
(* fTooltipZCoord = -0.957; *)
(* '<S1>:1:43' fLengthArmCombined 			= sqrt(fTooltipXCoord^2 + fTooltipYCoord^2); *)
fLengthArmCombined := SQRT(((fTooltipXCoordGlobal - 0.75) * (fTooltipXCoordGlobal - 0.75)) + (fTooltipYCoordGlobal * fTooltipYCoordGlobal));
(* '<S1>:1:46' if fTooltipYCoord < 0.001 *)
(* '<S1>:1:52' fHypotenusArm 				= sqrt(fLengthArmCombined^2 + fTooltipZCoord^2); *)
fHypotenusArm := SQRT((((fTooltipZCoordGlobal - 1.065) - 1.334) * ((fTooltipZCoordGlobal - 1.065) - 1.334)) + (fLengthArmCombined * fLengthArmCombined));
(* fAngleMainArmHypotenusTemp 		= acosd((fLengthP2PMainArm^2 + fHypotenusArm^2 - fLengthP2PKnuckleArm^2) / (2 * fLengthP2PMainArm * fHypotenusArm)); *)
(* if fTooltipZCoord < 0 *)
(* fAngleMainArmHypotenus = -fAngleMainArmHypotenusTemp *)
(* else *)
(* fAngleMainArmHypotenus = fAngleMainArmHypotenusTemp *)
(* end *)
(* '<S1>:1:60' fAngleMainArmHypotenus 		= acosd((fLengthP2PMainArm^2 + fHypotenusArm^2 - fLengthP2PKnuckleArm^2) / (2 * fLengthP2PMainArm * fHypotenusArm)); *)
(* '<S1>:1:62' fAngleHypotenus				= atand(fTooltipZCoord / fLengthArmCombined); *)
(* '<S1>:1:63' fAngleMainArm				= fAngleMainArmHypotenus + fAngleHypotenus - fOffsetAngleDegMain; *)
fAngleMainArm_tmp := fHypotenusArm * fHypotenusArm;
fAngleMainArm := ((ACOS(((fAngleMainArm_tmp + 2.2470010000000005) - 1.334025) / (2.998 * fHypotenusArm)) * 57.295779513082323) + (ATAN(((fTooltipZCoordGlobal - 1.065) - 1.334) / fLengthArmCombined) * 57.295779513082323)) - 7.58;
(* '<S1>:1:65' fAngleKnuckleMainArm		= acosd((fLengthP2PKnuckleArm^2 + fLengthP2PMainArm^2 - fHypotenusArm^2) / (2 * fLengthP2PMainArm * fLengthP2PKnuckleArm)); *)
(* '<S1>:1:66' fAngleKnuckleArm			= fAngleKnuckleMainArm - fOffsetAngleDegKnuckle; *)
fAngleKnuckleArm := (ACOS((3.5810260000000005 - fAngleMainArm_tmp) / 3.4626900000000003) * 57.295779513082323) - 86.74;
(* '<S1>:1:68' fAngleMainArmAct			= fAngleMainArm + fOffsetAngleDegMainAct; *)
(* '<S1>:1:69' fAngleKnuckleArmAct         = fAngleKnuckleArm + fOffsetAngleDegKnuckleAct; *)
(* '<S1>:1:71' fLengthActuatorMain         = sqrt(fLengthAMain^2 + fLengthBMain^2 -(2*fLengthAMain*fLengthBMain*cosd(fAngleMainArmAct))); *)
(* '<S1>:1:72' fStrokeActuatorMain         = fLengthActuatorMain - fMinLengthActuatorMain; *)
fLengthArmCombined := fAngleMainArm + 69.7;
i0_cosd(x := fLengthArmCombined);
(* '<S1>:1:74' fLengthActuatorKnuckle         = sqrt(fLengthAKnuckle^2 + fLengthBKnuckle^2 -(2*fLengthAKnuckle*fLengthBKnuckle*cosd(fAngleKnuckleArmAct))); *)
(* '<S1>:1:75' fStrokeActuatorKnuckle         = fLengthActuatorKnuckle - fMinLengthActuatorKnuckle; *)
fHypotenusArm := fAngleKnuckleArm + 82.85;
i0_cosd(x := fHypotenusArm);
(* Outport: '<Root>/fStrokeActuatorMain' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorMain := SQRT(0.70303699999999991 - (0.70118799999999992 * fLengthArmCombined)) - 0.692;
(* Outport: '<Root>/fStrokeActuatorKnuckle' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorKnuckle := SQRT(0.62269925 - (0.284557 * fHypotenusArm)) - 0.627;

]]></xhtml>
          </ST>
        </body>
      </pou>
      <pou name="cosd" pouType="functionBlock">
        <interface>
          <inputVars/>
          <outputVars/>
          <inOutVars>
            <variable name="x">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="b_n">
              <type>
                <SINT/>
              </type>
            </variable>
            <variable name="b_x">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="absx">
              <type>
                <LREAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
b_x := rt_remd(u0 := x, u1 := 360.0);
absx := ABS(b_x);

IF absx > 180.0 THEN 

    IF b_x > 0.0 THEN 
        b_x := b_x - 360.0;
    ELSE 
        b_x := b_x + 360.0;
    END_IF;

    absx := ABS(b_x);
END_IF;


IF absx <= 45.0 THEN 
    b_x := 0.017453292519943295 * b_x;
    b_n := 0;
ELSIF absx <= 135.0 THEN 

    IF b_x > 0.0 THEN 
        b_x := (b_x - 90.0) * 0.017453292519943295;
        b_n := 1;
    ELSE 
        b_x := (b_x + 90.0) * 0.017453292519943295;
        b_n := -1;
    END_IF;

ELSIF b_x > 0.0 THEN 
    b_x := (b_x - 180.0) * 0.017453292519943295;
    b_n := 2;
ELSE 
    b_x := (b_x + 180.0) * 0.017453292519943295;
    b_n := -2;
END_IF;


CASE b_n OF
    0: 
        x := COS(b_x);
    1: 
        x :=  -SIN(b_x);
    -1: 
        x := SIN(b_x);
    ELSE
        x :=  -COS(b_x);
END_CASE;


]]></xhtml>
          </ST>
        </body>
      </pou>
      <pou name="rt_remd" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="u0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="u1">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="u">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
u := u0 / u1;

IF u1 <= rt_floord(u := u1) THEN 
    rt_remd := u0 - (DINT_TO_LREAL(TRUNC(u)) * u1);
ELSE 
    tmp := ABS(u);

    IF tmp < 4.503599627370496E+15 THEN 

        IF u >= 0.5 THEN 
            rt_remd := rt_floord(u := u + 0.5);
        ELSIF u > -0.5 THEN 
            rt_remd := 0.0;
        ELSE 
            rt_remd := rt_ceild(u := u - 0.5);
        END_IF;

    ELSE 
        rt_remd := u;
    END_IF;


    IF ABS(u - rt_remd) <= (2.2204460492503131E-16 * tmp) THEN 
        rt_remd := 0.0;
    ELSE 
        rt_remd := (u - DINT_TO_LREAL(TRUNC(u))) * u1;
    END_IF;

END_IF;


]]></xhtml>
          </ST>
        </body>
      </pou>
      <pou name="rt_floord" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="u">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <localVars/>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
rt_floord := DINT_TO_LREAL(TRUNC(u));

IF u = rt_floord THEN 
    rt_floord := u;
ELSIF u < 0.0 THEN 
    rt_floord := rt_floord - 1.0;
END_IF;


]]></xhtml>
          </ST>
        </body>
      </pou>
      <pou name="rt_ceild" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="u">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <localVars/>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
rt_ceild := DINT_TO_LREAL(TRUNC(u));

IF u = rt_ceild THEN 
    rt_ceild := u;
ELSIF u >= 0.0 THEN 
    rt_ceild := rt_ceild + 1.0;
END_IF;


]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations/>
  </instances>
</project>
