<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_InverseKin" Id="{63520e01-41a1-4748-9cc3-f4790e74a208}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_InverseKin
VAR_INPUT
	fTooltipXCoordGlobal: LREAL;
	fTooltipYCoordGlobal: LREAL;
	fTooltipZCoordGlobal: LREAL;
END_VAR
VAR_OUTPUT
	fAngleMainArm: LREAL;
	fAngleKnuckleArm: LREAL;
	fStrokeActuatorMain: LREAL;
	fStrokeActuatorKnuckle: LREAL;
END_VAR
VAR
	fLengthArmCombined: LREAL;
	fHypotenusArm: LREAL;
	fAngleMainArm_tmp: LREAL;
	i0_cosd: cosd;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* MATLAB Function: '<Root>/Inverse kinematics function' *)
(* Crane constant parameters *)
(* MATLAB Function 'Inverse kinematics function': '<S1>:1' *)
(* '<S1>:1:5' fLengthP2PMainArm			= 1.499; *)
(* '<S1>:1:6' fLengthP2PKnuckleArm		= 1.155; *)
(* '<S1>:1:8' fLengthAMain				= 0.614; *)
(* '<S1>:1:9' fLengthBMain				= 0.571; *)
(* '<S1>:1:10' fMinLengthActuatorMain		= 0.692; *)
(* '<S1>:1:11' fMaxStrokeActuatorMain		= 0.320; *)
(* fOffsetAngleDegMain			= 4.6; *)
(* '<S1>:1:13' fOffsetAngleDegMain			= 7.58; *)
(* '<S1>:1:14' fOffsetAngleRadMain         = deg2rad(fOffsetAngleDegMain); *)
(* '<S1>:1:15' fOffsetAngleDegMainAct		= 69.7; *)
(* '<S1>:1:17' fLengthAKnuckle				= 0.767; *)
(* '<S1>:1:18' fLengthBKnuckle				= 0.1855; *)
(* '<S1>:1:19' fMinLengthActuatorKnuckle	= 0.627; *)
(* '<S1>:1:20' fMaxStrokeActuatorKnuckle	= 0.260; *)
(* fOffsetAngleDegKnuckle		= -12.5; *)
(* '<S1>:1:22' fOffsetAngleDegKnuckle		= 86.74; *)
(* '<S1>:1:23' fOffsetAngleRadKnuckle      = deg2rad(fOffsetAngleDegKnuckle); *)
(* '<S1>:1:24' fOffsetAngleDegKnuckleAct	= 82.85; *)
(* '<S1>:1:26' fSlewGearRatio				= 3.68; *)
(* '<S1>:1:28' fWinchGearRatio				= 32; *)
(* '<S1>:1:31' fTooltipXCoord = (fTooltipXCoordGlobal - 0.75); *)
(* '<S1>:1:32' fTooltipYCoord = (fTooltipYCoordGlobal - 0.0); *)
(* fTooltipZCoord = (fTooltipZCoordGlobal - 1.334); *)
(* '<S1>:1:34' fTooltipZCoord = (fTooltipZCoordGlobal - 1.065  - 1.334); *)
(* fTooltipXCoord = 1.571; *)
(* fTooltipYCoord = 0; *)
(* % %fTooltipZCoord = (fTooltipZCoordGlobal - 1.334); *)
(* fTooltipZCoord = -0.957; *)
(* '<S1>:1:43' fLengthArmCombined 			= sqrt(fTooltipXCoord^2 + fTooltipYCoord^2); *)
fLengthArmCombined := SQRT(((fTooltipXCoordGlobal - 0.75) * (fTooltipXCoordGlobal - 0.75)) + (fTooltipYCoordGlobal * fTooltipYCoordGlobal));
(* '<S1>:1:46' if fTooltipYCoord < 0.001 *)
(* '<S1>:1:52' fHypotenusArm 				= sqrt(fLengthArmCombined^2 + fTooltipZCoord^2); *)
fHypotenusArm := SQRT((((fTooltipZCoordGlobal - 1.065) - 1.334) * ((fTooltipZCoordGlobal - 1.065) - 1.334)) + (fLengthArmCombined * fLengthArmCombined));
(* fAngleMainArmHypotenusTemp 		= acosd((fLengthP2PMainArm^2 + fHypotenusArm^2 - fLengthP2PKnuckleArm^2) / (2 * fLengthP2PMainArm * fHypotenusArm)); *)
(* if fTooltipZCoord < 0 *)
(* fAngleMainArmHypotenus = -fAngleMainArmHypotenusTemp *)
(* else *)
(* fAngleMainArmHypotenus = fAngleMainArmHypotenusTemp *)
(* end *)
(* '<S1>:1:60' fAngleMainArmHypotenus 		= acosd((fLengthP2PMainArm^2 + fHypotenusArm^2 - fLengthP2PKnuckleArm^2) / (2 * fLengthP2PMainArm * fHypotenusArm)); *)
(* '<S1>:1:62' fAngleHypotenus				= atand(fTooltipZCoord / fLengthArmCombined); *)
(* '<S1>:1:63' fAngleMainArm				= fAngleMainArmHypotenus + fAngleHypotenus - fOffsetAngleDegMain; *)
fAngleMainArm_tmp := fHypotenusArm * fHypotenusArm;
fAngleMainArm := ((ACOS(((fAngleMainArm_tmp + 2.2470010000000005) - 1.334025) / (2.998 * fHypotenusArm)) * 57.295779513082323) + (ATAN(((fTooltipZCoordGlobal - 1.065) - 1.334) / fLengthArmCombined) * 57.295779513082323)) - 7.58;
(* '<S1>:1:65' fAngleKnuckleMainArm		= acosd((fLengthP2PKnuckleArm^2 + fLengthP2PMainArm^2 - fHypotenusArm^2) / (2 * fLengthP2PMainArm * fLengthP2PKnuckleArm)); *)
(* '<S1>:1:66' fAngleKnuckleArm			= fAngleKnuckleMainArm - fOffsetAngleDegKnuckle; *)
fAngleKnuckleArm := (ACOS((3.5810260000000005 - fAngleMainArm_tmp) / 3.4626900000000003) * 57.295779513082323) - 86.74;
(* '<S1>:1:68' fAngleMainArmAct			= fAngleMainArm + fOffsetAngleDegMainAct; *)
(* '<S1>:1:69' fAngleKnuckleArmAct         = fAngleKnuckleArm + fOffsetAngleDegKnuckleAct; *)
(* '<S1>:1:71' fLengthActuatorMain         = sqrt(fLengthAMain^2 + fLengthBMain^2 -(2*fLengthAMain*fLengthBMain*cosd(fAngleMainArmAct))); *)
(* '<S1>:1:72' fStrokeActuatorMain         = fLengthActuatorMain - fMinLengthActuatorMain; *)
fLengthArmCombined := fAngleMainArm + 69.7;
i0_cosd(x := fLengthArmCombined);
(* '<S1>:1:74' fLengthActuatorKnuckle         = sqrt(fLengthAKnuckle^2 + fLengthBKnuckle^2 -(2*fLengthAKnuckle*fLengthBKnuckle*cosd(fAngleKnuckleArmAct))); *)
(* '<S1>:1:75' fStrokeActuatorKnuckle         = fLengthActuatorKnuckle - fMinLengthActuatorKnuckle; *)
fHypotenusArm := fAngleKnuckleArm + 82.85;
i0_cosd(x := fHypotenusArm);
(* Outport: '<Root>/fStrokeActuatorMain' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorMain := SQRT(0.70303699999999991 - (0.70118799999999992 * fLengthArmCombined)) - 0.692;
(* Outport: '<Root>/fStrokeActuatorKnuckle' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorKnuckle := SQRT(0.62269925 - (0.284557 * fHypotenusArm)) - 0.627;

]]></ST>
    </Implementation>
    <LineIds Name="FB_InverseKin">
      <LineId Id="3" Count="67" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>