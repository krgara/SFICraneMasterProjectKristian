<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_InverseKin2d" Id="{b7c1a8ce-8495-4ef6-8bcd-3511d51d9606}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_InverseKin2d
VAR_INPUT
	fPtXd: LREAL;
	fPtYd: LREAL;
	fTheta1: LREAL;
END_VAR
VAR_OUTPUT
	fStrokeActuatorMain: LREAL;
	fStrokeActuatorKnuckle: LREAL;
	fTheta3: LREAL;
	fTheta4: LREAL;
END_VAR
VAR
	h: LREAL;
	ThetaB: LREAL;
	ThetaB_tmp: LREAL;
	b_a_tmp: LREAL;
	a_tmp: LREAL;
	i0_cosd: cosd;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* MATLAB Function: '<Root>/Inverse kinematics function' *)
(* clc; close all; clear; *)
(* MATLAB Function 'Inverse kinematics function': '<S1>:1' *)
(* Inputs *)
(* Desired global coordinates *)
(* fPtXd		= 0.75 + 1.5; *)
(* fPtYd		= 1.065 + 0.176; *)

(* %     fPtXd		= 0.75 + 0.716; *)
(* %  	fPtYd		= 1.065 + 0.705; *)
(* Platform constants *)
(* '<S1>:1:14' h0 = 1.0; *)
(* '<S1>:1:15' l0 = 0.75; *)
(* Crane constants *)
(* '<S1>:1:18' h1 = 1.334 + 0.065; *)
(* '<S1>:1:19' lm = 1.5; *)
(* '<S1>:1:20' lk = 1.158; *)
(* Calculate position of a2 as function of Theta1 *)
(* '<S1>:1:23' a2x = l0*cos(fTheta1) + h1*cos(fTheta1 + pi/2); *)
(* '<S1>:1:24' a2y = h0 + l0*sin(fTheta1) + h1*sin(fTheta1 + pi/2); *)
(* '<S1>:1:26' h = sqrt((fPtXd - a2x)^2 + (fPtYd - a2y)^2); *)
a_tmp := fPtXd - ((COS(fTheta1 + 1.5707963267948966) * 1.399) + (0.75 * COS(fTheta1)));
b_a_tmp := fPtYd - (((0.75 * SIN(fTheta1)) + 1.0) + (SIN(fTheta1 + 1.5707963267948966) * 1.399));
h := SQRT((a_tmp * a_tmp) + (b_a_tmp * b_a_tmp));
(* '<S1>:1:27' phi = atan((fPtYd - a2y) / (fPtXd - a2x)); *)
(* Calculate ThetaA and ThetaB *)
(* '<S1>:1:30' ThetaA = acos ((lm^2 + h^2 - lk^2) / (2*lm*h)); *)
(* '<S1>:1:31' ThetaB = acos ((lk^2 + lm^2 - h^2) / (2*lm*lk)); *)
ThetaB_tmp := h * h;
ThetaB := ACOS((3.5909639999999996 - ThetaB_tmp) / 3.4739999999999998);
(* '<S1>:1:33' fTheta3 = ThetaA + phi - fTheta1; *)
fTheta3 := (ACOS(((ThetaB_tmp + 2.25) - 1.3409639999999998) / (3.0 * h)) + ATAN(b_a_tmp / a_tmp)) - fTheta1;
(* '<S1>:1:34' fTheta4 = ThetaB - pi/2; *)
(* '<S1>:1:36' fTheta3deg = rad2deg(fTheta3); *)
(* '<S1>:1:37' fTheta4deg = rad2deg(fTheta4); *)
(* Crane constant parameters *)
(* '<S1>:1:40' fLengthP2PMainArm			= lm; *)
(* '<S1>:1:41' fLengthP2PKnuckleArm		= lk; *)
(* '<S1>:1:43' fLengthAMain				= 0.614; *)
(* '<S1>:1:44' fLengthBMain				= 0.571; *)
(* '<S1>:1:45' fMinLengthActuatorMain		= 0.692; *)
(* '<S1>:1:46' fMaxStrokeActuatorMain		= 0.320; *)
(* '<S1>:1:48' fOffsetAngleDegMainAct		= 62.1; *)
(* '<S1>:1:50' fLengthAKnuckle				= 0.767; *)
(* '<S1>:1:51' fLengthBKnuckle				= 0.184; *)
(* '<S1>:1:52' fMinLengthActuatorKnuckle	= 0.627; *)
(* '<S1>:1:53' fMaxStrokeActuatorKnuckle	= 0.260; *)
(* '<S1>:1:55' fOffsetAngleDegKnuckleAct	= 86.3; *)
(* '<S1>:1:58' fAngleMainArmAct			= fTheta3deg + fOffsetAngleDegMainAct; *)
(* '<S1>:1:59' fAngleKnuckleArmAct         = fTheta4deg + fOffsetAngleDegKnuckleAct; *)
(* '<S1>:1:61' fLengthActuatorMain         = sqrt(fLengthAMain^2 + fLengthBMain^2 -(2*fLengthAMain*fLengthBMain*cosd(fAngleMainArmAct))); *)
(* '<S1>:1:62' fStrokeActuatorMain         = fLengthActuatorMain - fMinLengthActuatorMain; *)
a_tmp := (57.295779513082323 * fTheta3) + 62.1;
b_a_tmp := a_tmp;
i0_cosd(x := b_a_tmp);
(* Outport: '<Root>/fStrokeActuatorMain' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorMain := SQRT(0.70303699999999991 - (0.70118799999999992 * b_a_tmp)) - 0.692;
(* MATLAB Function: '<Root>/Inverse kinematics function' *)
(* '<S1>:1:64' if fStrokeActuatorMain < 0 *)
b_a_tmp := a_tmp;
i0_cosd(x := b_a_tmp);

IF (SQRT(0.70303699999999991 - (0.70118799999999992 * b_a_tmp)) - 0.692) < 0.0 THEN 
    (* Outport: '<Root>/fStrokeActuatorMain' *)
    (* '<S1>:1:65' fStrokeActuatorMain = 0; *)
    fStrokeActuatorMain := 0.0;
END_IF;

(* '<S1>:1:70' fLengthActuatorKnuckle         = sqrt(fLengthAKnuckle^2 + fLengthBKnuckle^2 -(2*fLengthAKnuckle*fLengthBKnuckle*cosd(fAngleKnuckleArmAct))); *)
(* '<S1>:1:71' fStrokeActuatorKnuckle         = fLengthActuatorKnuckle - fMinLengthActuatorKnuckle; *)
a_tmp := ((ThetaB - 1.5707963267948966) * 57.295779513082323) + 86.3;
b_a_tmp := a_tmp;
i0_cosd(x := b_a_tmp);
(* Outport: '<Root>/fStrokeActuatorKnuckle' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fStrokeActuatorKnuckle := SQRT(0.62214500000000006 - (0.282256 * b_a_tmp)) - 0.627;
(* MATLAB Function: '<Root>/Inverse kinematics function' *)
(* '<S1>:1:73' if fStrokeActuatorKnuckle < 0 *)
b_a_tmp := a_tmp;
i0_cosd(x := b_a_tmp);

IF (SQRT(0.62214500000000006 - (0.282256 * b_a_tmp)) - 0.627) < 0.0 THEN 
    (* Outport: '<Root>/fStrokeActuatorKnuckle' *)
    (* '<S1>:1:74' fStrokeActuatorKnuckle = 0; *)
    fStrokeActuatorKnuckle := 0.0;
END_IF;

(* Outport: '<Root>/fTheta4' incorporates:
 *  MATLAB Function: '<Root>/Inverse kinematics function' *)
fTheta4 := ThetaB - 1.5707963267948966;

]]></ST>
    </Implementation>
    <LineIds Name="FB_InverseKin2d">
      <LineId Id="3" Count="92" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>