<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P_MachineControl" Id="{a90e0789-57c0-407b-b2f1-afc96a165b42}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_MachineControl
VAR
	fbInverse					: FB_Inverse;
	fbForward					: FB_Forward;
	fbWireLengthOnCrane			: FB_WireLengthOnCraneFunction;
	fRefPosX					: LREAL := GVL_InverseKinematics.fTooltipXCoordGlobalIni;
	fRefPosY					: LREAL := GVL_InverseKinematics.fTooltipYCoordGlobalIni;	
	fRefPosPayload				: LREAL := G_MachineControl.fPayloadHeightIni;
	fThetaWinchMotorIni			: LREAL;
	fWireLengthOut				: LREAL;
	fWinchPitchRadius			: LREAL;
	fThetaWinch					: LREAL;
	bStartWave					: BOOL;
			
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[G_MachineControl.bManualMode := G_Inputs.bManualModeSelector;
G_MachineControl.bAutoMode := G_Inputs.bAutoModeSelector;
GVL_Safety_AXIS4.ChA_STO_Enable := G_Inputs.bManualModeSelector OR G_Inputs.bAutoModeSelector;

IF G_Inputs.bAutoModeSelector THEN
fRefPosX := fRefPosX + G_Sensors.fJoystickLeftNormalizedX*-0.0005;
fRefPosY := fRefPosY + G_Sensors.fJoystickLeftNormalizedY*0.0005;
fRefPosPayload := fRefPosPayload + G_Sensors.fJoystickRightNormalizedY*0.0002;
END_IF

bStartWave := NOT G_Inputs.bRedButton; //Red button is inverted, i.e. is active when not pushed

//Wave function used for testing
IF bStartWave THEN
	//Clock
	G_MachineControl.fTimeSinceStart := G_MachineControl.fTimeSinceStart + G_MachineControl.fSampleTime;
	GVL_InverseKinematics.fTheta1 := 0.012*SIN(2.5*G_MachineControl.fTimeSinceStart);
END_IF

(*
IF bStartWave THEN
	//Clock
	G_Work.fTimeSinceStart := G_Work.fTimeSinceStart + G_Work.fSampleTime;
	GVL_InverseKinematics.fTheta1 := G_StablePlatformParameters.fPlatformAngle;
END_IF
*)

fbInverse(
	fPtXd := fRefPosX, 
	fPtYd := fRefPosY, 
	fTheta1 := GVL_InverseKinematics.fTheta1,
	
	fTheta3 => GVL_InverseKinematics.fAngleMainArmInverse, 
	fTheta4 => GVL_InverseKinematics.fAngleKnuckleArmInverse,
	fStrokeActuatorMain => GVL_InverseKinematics.fStrokeActuatorMainInverse,
	fStrokeActuatorKnuckle => GVL_InverseKinematics.fStrokeActuatorKnuckleInverse,	
);

IF NOT (G_Inputs.bAutoModeSelector OR G_Inputs.bJoystickRightEnable) THEN
	fThetaWinchMotorIni := G_MachineControl.fWinchMotorAngle;
END_IF


fbForward(
	fTheta1 := G_StablePlatformParameters.fPlatformAngle,
	fStrokeActuatorMain := G_MachineControl.fStrokeActuatorMain,
	fStrokeActuatorKnuckle := G_MachineControl.fStrokeActuatorKnuckle,
	y => G_MachineControl.fCraneForwardY, 
	fTheta3 => G_MachineControl.fTheta3Forward,
	fTheta4 => G_MachineControl.fTheta4Forward,
);

fbWireLengthOnCrane(
	fTheta3 := G_MachineControl.fTheta3Forward,
	fTheta4 := G_MachineControl.fTheta4Forward,
	wireLengthOnCrane => G_MachineControl.fWireLengthOnCrane,
);
	
fWireLengthOut := G_MachineControl.fWireLengthOnCrane + (G_MachineControl.fCraneForwardY - fRefPosPayload);

IF G_MachineControl.fWinchMotorAngle > G_MachineControl.fEncoderValueLayer2 THEN
	fWinchPitchRadius := G_MachineControl.fWinchPitchRadiusLayer2;
ELSE
	fWinchPitchRadius := G_MachineControl.fWinchPitchRadiusLayer1;
END_IF

fThetaWinch := (fWireLengthOut / fWinchPitchRadius);
G_MachineControl.fWinchMotorAngleRef := fThetaWinch*G_MachineControl.fWinchGearRatio - G_MachineControl.fEncoderValuePayload0;

]]></ST>
    </Implementation>
    <LineIds Name="P_MachineControl">
      <LineId Id="5" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="251" Count="4" />
      <LineId Id="250" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="160" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="295" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="326" Count="4" />
      <LineId Id="334" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="338" Count="3" />
      <LineId Id="332" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="351" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="357" Count="1" />
      <LineId Id="355" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>