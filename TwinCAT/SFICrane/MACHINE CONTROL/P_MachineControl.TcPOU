<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P_MachineControl" Id="{a90e0789-57c0-407b-b2f1-afc96a165b42}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_MachineControl
VAR
	fbInverse					: FB_Inverse;
	fbForward					: FB_Forward;
	fbWireLengthOnCrane			: FB_WireLengthOnCraneFunction;
	fRefPosX					: LREAL := G_InverseKinematics.fTooltipXCoordGlobalIni;
	fRefPosY					: LREAL := G_InverseKinematics.fTooltipYCoordGlobalIni;	
	fRefPosPayload				: LREAL := G_MachineControl.fPayloadHeightIni;
	fWireLengthOutAutoStart		: LREAL;
	fWireLengthOut				: LREAL;
	fWireLengthOnCraneAutoStart	: LREAL;
	fWinchPitchRadius			: LREAL;
	fThetaWinch					: LREAL;
	bStartWave					: BOOL;
			
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[G_MachineControl.bManualMode := G_Inputs.bManualModeSelector;
G_MachineControl.bAutoMode := G_Inputs.bAutoModeSelector;
G_Safety_AXIS4.ChA_STO_Enable := G_Inputs.bManualModeSelector OR G_Inputs.bAutoModeSelector;

IF G_Inputs.bAutoModeSelector THEN
fRefPosX := fRefPosX + G_Sensors.fJoystickLeftNormalizedX*-0.0005;
fRefPosY := fRefPosY + G_Sensors.fJoystickLeftNormalizedY*0.0005;
fRefPosPayload := fRefPosPayload + G_Sensors.fJoystickRightNormalizedY*0.0002;
END_IF

bStartWave := NOT G_Inputs.bRedButton; //Red button is inverted, i.e. is active when not pushed

//Wave function used for testing
IF bStartWave THEN
	//Clock
	G_MachineControl.fTimeSinceStart := G_MachineControl.fTimeSinceStart + G_MachineControl.fSampleTime;
	G_InverseKinematics.fTheta1 := 0.012*SIN(2.5*G_MachineControl.fTimeSinceStart);
END_IF

(*
IF bStartWave THEN
	//Clock
	G_Work.fTimeSinceStart := G_Work.fTimeSinceStart + G_Work.fSampleTime;
	GVL_InverseKinematics.fTheta1 := G_StablePlatformParameters.fPlatformAngle;
END_IF
*)

fbInverse(
	fPtXd := fRefPosX, 
	fPtYd := fRefPosY, 
	fTheta1 := G_InverseKinematics.fTheta1,
	//fTheta1 := G_StablePlatformScaledIO.fPlatformAngleDeg*(PI/180),
	
	fTheta3 => G_InverseKinematics.fAngleMainArmInverse, 
	fTheta4 => G_InverseKinematics.fAngleKnuckleArmInverse,
	fStrokeActuatorMain => G_InverseKinematics.fStrokeActuatorMainInverse,
	fStrokeActuatorKnuckle => G_InverseKinematics.fStrokeActuatorKnuckleInverse,	
);

fbForward(
	fTheta1 := G_StablePlatformScaledIO.fPlatformAngle,
	fStrokeActuatorMain := (G_MachineControl.fStrokeActuatorMain+11),
	fStrokeActuatorKnuckle := (G_MachineControl.fStrokeActuatorKnuckle-7),
	x => G_MachineControl.fCraneForwardX,
	y => G_MachineControl.fCraneForwardY, 
	fTheta3 => G_MachineControl.fTheta3Forward,
	fTheta4 => G_MachineControl.fTheta4Forward,
);

fbWireLengthOnCrane(
	fTheta3 := G_MachineControl.fTheta3Forward,
	fTheta4 := G_MachineControl.fTheta4Forward,
	wireLengthOnCrane => G_MachineControl.fWireLengthOnCrane,
);

IF NOT (G_Inputs.bAutoModeSelector AND G_AXIS1.bBC_MoveAbsDone AND G_AXIS3.bTC_MoveAbsDone) THEN
	G_MachineControl.fEncoderValueStartAuto := G_MachineControl.fWinchMotorAngleEncoder;
	G_MachineControl.fRefPosPayloadAutoStart := G_MachineControl.fPayloadHeightIni;
	G_MachineControl.fTooltipYAutoStart := G_MachineControl.fCraneForwardY;	
	G_MachineControl.fWinchMotorAngleRelRef := G_MachineControl.fWinchMotorAngleRefDeg;
	fWireLengthOnCraneAutoStart := G_MachineControl.fWireLengthOnCrane;
END_IF

//fWireLengthOutAutoStart := fWireLengthOnCraneAutoStart + (G_MachineControl.fTooltipYAutoStart - G_MachineControl.fRefPosPayloadAutoStart);
fWireLengthOut := G_MachineControl.fWireLengthOnCrane + (G_MachineControl.fCraneForwardY - fRefPosPayload);


IF G_MachineControl.fWinchMotorAngleEncoder > G_MachineControl.fEncoderValueLayer2 THEN
	fWinchPitchRadius := G_MachineControl.fWinchPitchRadiusLayer2;
ELSE
	fWinchPitchRadius := G_MachineControl.fWinchPitchRadiusLayer1;
END_IF

fThetaWinch := (fWireLengthOut / fWinchPitchRadius);
G_MachineControl.fWinchMotorAngleRefDeg := fThetaWinch*G_MachineControl.fWinchGearRatio*180/PI;

IF NOT (G_Inputs.bAutoModeSelector AND G_AXIS1.bBC_MoveAbsDone AND G_AXIS3.bTC_MoveAbsDone) THEN
	G_MachineControl.fEncoderValueStartAuto := G_MachineControl.fWinchMotorAngleEncoder;
	
	G_MachineControl.fWinchMotorAngleRelRef := G_MachineControl.fWinchMotorAngleRefDeg;
END_IF

G_MachineControl.fWinchMotorAngleAbsRef := G_MachineControl.fEncoderValueStartAuto + G_MachineControl.fWinchMotorAngleRelRef - G_MachineControl.fWinchMotorAngleRefDeg;

]]></ST>
    </Implementation>
    <LineIds Name="P_MachineControl">
      <LineId Id="426" Count="30" />
      <LineId Id="545" Count="0" />
      <LineId Id="457" Count="5" />
      <LineId Id="468" Count="15" />
      <LineId Id="516" Count="3" />
      <LineId Id="521" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="484" Count="1" />
      <LineId Id="513" Count="0" />
      <LineId Id="486" Count="6" />
      <LineId Id="500" Count="4" />
      <LineId Id="512" Count="0" />
      <LineId Id="505" Count="4" />
      <LineId Id="407" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>